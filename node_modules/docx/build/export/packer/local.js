"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const compiler_1 = require("./compiler");
const pdf_convert_wrapper_1 = require("./pdf-convert-wrapper");
class LocalPacker {
    constructor(document, styles, properties, numbering, media) {
        this.pdfConverter = new pdf_convert_wrapper_1.PdfConvertWrapper();
        this.packer = new compiler_1.Compiler(document, styles, properties, numbering, media);
    }
    pack(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            filePath = filePath.replace(/.docx$/, "");
            this.stream = fs.createWriteStream(`${filePath}.docx`);
            yield this.packer.compile(this.stream);
        });
    }
    packPdf(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            filePath = filePath.replace(/.pdf$/, "");
            const fileName = path.basename(filePath, path.extname(filePath));
            const tempPath = path.join(os.tmpdir(), `${fileName}.docx`);
            this.stream = fs.createWriteStream(tempPath);
            yield this.packer.compile(this.stream);
            const text = yield this.pdfConverter.convert(tempPath);
            return new Promise((resolve, reject) => {
                fs.writeFile(`${filePath}.pdf`, text, (err) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve();
                });
            });
        });
    }
}
exports.LocalPacker = LocalPacker;
//# sourceMappingURL=local.js.map